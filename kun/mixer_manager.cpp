#include "mixer_manager.h"
#include "mixer.h"
#include "sound_base.h"
#include "debug.h"


MixerManager::MixerManager (Engine* const engine_ptr)
	: Manager (engine_ptr)
{
}


MixerManager::~MixerManager ()
{
}


void MixerManager::ManagerUpdateMixer (const float dt)
{
	ManagerSortByPriority ();


	for (ManagedList::const_iterator i = managed_arr_.begin (); i != managed_arr_.end (); ++i)
	{
		Mixer* const mixer = (*i);
		mixer->Update (dt);
	}


	for (SoundEventList::const_iterator i = sound_event_arr_.begin (); i != sound_event_arr_.end (); ++i)
	{
		const SoundEvent& event = (*i);
		event.Execute ();
	}
	sound_event_arr_.clear ();
}


void MixerManager::ManagerQueueSoundEvent (const SoundEvent& event)
{
	sound_event_arr_.push_back (event);
}


// Delete events generated by this sound or at least set their caller to NULL.
void MixerManager::ManagerCleanSoundEvent (Sound* const sound)
{
	for (SoundEventList::iterator i = sound_event_arr_.begin (); i != sound_event_arr_.end (); ++i)
	{
		SoundEvent& event = (*i);
		event.CleanIfEqual (sound);
	}
}

